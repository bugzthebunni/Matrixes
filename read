# Matrixes
README.md
مقایسه ضرب ماتریس: استاندارد و استراسن

این پروژه، عملکرد دو الگوریتم ضرب ماتریسی را برای ماتریس‌های مربعی با اندازه‌های مختلف مقایسه می‌کند.

📌 توضیحات

ضرب ماتریسی یکی از عملیات پایه‌ای در بسیاری از کاربردهای علمی و مهندسی است. در این پروژه، دو روش مختلف ضرب ماتریس پیاده‌سازی و مقایسه می‌شوند:

ضرب استاندارد – پیاده‌سازی ساده با سه حلقه تو در تو، همراه با بهینه‌سازی جزئی برای صرف‌نظر از عناصر صفر.

الگوریتم استراسن (Strassen) – روشی بازگشتی و تقسیم‌و‌حل که تعداد ضرب‌های ماتریسی را کاهش می‌دهد.


آزمایش برای اندازه‌های ماتریسی ۲۵۶×۲۵۶، ۵۱۲×۵۱۲ و ۱۰۲۴×۱۰۲۴ انجام می‌شود.

🚀 ویژگی‌ها

پیاده‌سازی کارآمد هر دو الگوریتم

بنچمارک (Benchmark) خودکار همراه با اندازه‌گیری زمان اجرا

ذخیره نتایج برای تحلیل و رسم نمودار


🧠 نحوه کار

برای اندازه‌های کوچکتر یا مساوی ۱۲۸×۱۲۸، الگوریتم استراسن برای بهینه‌سازی به ضرب استاندارد برمی‌گردد.

ماتریس‌ها به‌صورت تصادفی با اعداد صحیح بین ۰ تا ۹ مقداردهی می‌شوند.

زمان اجرای هر روش اندازه‌گیری و ذخیره می‌شود.


🛠️ پیش‌نیازها

پایتون نسخه ۳ یا بالاتر

کتابخانه NumPy


برای نصب NumPy:
```
pip install numpy

📂 فایل‌ها

Matrix.py — شامل پیاده‌سازی هر دو الگوریتم و کد بنچمارک

benchmark_results.npy — فایل NumPy برای ذخیره نتایج اجرای بنچمارک


📈 خروجی نمونه

Testing 256x256...
Standard: 0.73s, Strassen: 0.60s
Testing 512x512...
Standard: 5.42s, Strassen: 4.31s
Testing 1024x1024...
Standard: 42.67s, Strassen: 30.29s

📊 رسم نمودار نتایج

برای مشاهده نتایج ذخیره‌شده:

```
import numpy as np
import matplotlib.pyplot as plt

data = np.load('benchmark_results.npy', allow_pickle=True).item()
sizes = [256, 512, 1024]

plt.plot(sizes, data['Standard'], label='استاندارد')
plt.plot(sizes, data['Strassen'], label='استراسن')
plt.xlabel('اندازه ماتریس (n × n)')
plt.ylabel('زمان (ثانیه)')
plt.title('مقایسه عملکرد ضرب ماتریس')
plt.legend()
plt.grid(True)
plt.show()
```
✅ اجرا

اطمینان حاصل کنید که کد دارای بخش اجرای اصلی باشد:

```
if name == "main":
    ...

سپس کد را اجرا کنید:

python Matrix.py
```
